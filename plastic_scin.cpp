#include <math_h/gnuplot/gnuplot.h>
#include <math_h/interpolate.h>
#include <math_h/randomfunc.h>
#include "plastic_scin.h"
using namespace std;
const double refraction=1.58;
LinearInterpolation<double> LAMBDA;
LinearInterpolation<double> ABSOR;
RandomValueGenerator<double> GetLambdaDistribution(){
	static vector<double> data={
		359.686,0.686036,
		361.518,1.66851,
		363.089,2.79232,
		364.66,3.91613,
		365.707,5.18177,
		367.016,6.44692,
		367.801,7.85389,
		368.586,8.97918,
		370.157,11.6523,
		370.681,13.0598,
		371.204,14.4672,
		371.728,15.7338,
		372.251,17.1413,
		373.822,23.3355,
		374.084,24.7435,
		374.346,26.1515,
		375.393,33.0509,
		375.916,34.4584,
		376.178,35.8663,
		376.963,42.2029,
		377.225,43.6108,
		378.796,54.1713,
		379.058,55.5792,
		380.105,63.0421,
		380.366,64.45,
		380.628,65.858,
		381.675,73.0391,
		382.199,74.4466,
		382.461,75.8545,
		383.246,81.346,
		383.508,82.754,
		384.031,84.1614,
		384.555,85.4281,
		385.079,86.8355,
		385.602,88.243,
		386.649,90.6354,
		387.696,91.901,
		388.743,93.3075,
		390.576,94.29,
		392.932,94.426,
		394.503,93.4376,
		395.812,92.1675,
		396.597,90.8984,
		398.168,88.2194,
		398.691,86.81,
		399.215,85.4005,
		400,84.1315,
		400.524,82.722,
		401.309,81.4529,
		402.618,78.3519,
		403.403,77.0828,
		404.188,75.6729,
		404.712,74.2635,
		405.236,72.854,
		405.497,71.4451,
		407.33,66.6529,
		407.853,65.2435,
		408.639,63.9744,
		408.901,62.5654,
		409.424,61.156,
		410.471,58.1963,
		410.995,56.7869,
		411.518,55.3774,
		412.304,54.1083,
		413.089,52.8393,
		413.874,51.4293,
		415.707,48.0456,
		416.492,46.6357,
		417.277,45.3666,
		417.801,43.9572,
		418.586,42.6881,
		419.372,41.2782,
		420.419,38.741,
		421.204,37.4719,
		421.99,36.062,
		422.775,34.6521,
		423.822,33.3825,
		426.963,28.7287,
		428.01,27.4591,
		429.058,26.1896,
		430.366,24.9195,
		431.414,23.6499,
		432.723,22.3799,
		433.77,21.1103,
		435.602,19.2759,
		436.911,18.0058,
		438.22,16.8766,
		439.791,15.7469,
		441.361,14.6172,
		442.932,13.4875,
		443.717,12.9226,
		445.288,11.7929,
		447.12,10.8035,
		448.953,9.53248,
		451.047,8.68348,
		452.88,7.83497,
		454.974,6.98596,
		457.33,6.27731,
		459.686,5.70951,
		462.042,5.00086,
		463.089,4.7172,
		465.445,4.1494,
		467.801,3.72244,
		470.157,3.29548,
		472.513,2.86852,
		475.131,2.58191,
		477.487,2.15495,
		480.105,2.00919,
		481.937,1.86491,
		484.293,1.57879,
		486.911,1.43303,
		489.267,1.14692,
		491.885,0.86031,
		494.241,0.574196,
		496.859,0.428434
	};
	if(LAMBDA.size()==0)
		for(int i=0,n=data.size()-1;i<n;i+=2)
			LAMBDA<<make_pair(data[i],data[i+1]);
	RandomValueGenerator<double> gen([LAMBDA](double lambda){return LAMBDA(lambda);},LAMBDA.min(),LAMBDA.max(),200);
	return static_left(gen);
}
double GetAbsorption(double lambda){
	static vector<double> data={
		348.842,0.083,
		351.158,0.077,
		354.247,0.069,
		356.564,0.063,
		358.88, 0.057,
		366.216,0.047,
		374.324,0.032,
		381.274,0.019,
		388.996,0.012,
		395.946,0.009,
		413.707,0.005,
		505.985,0.003,
		597.876,0.002,
		625.29, 0.002
	};
	if(ABSOR.size()==0){
		for(int i=0,n=data.size()-1;i<n;i+=2)
			ABSOR<<make_pair(data[i],data[i+1]/10.0);
		PlotPoints<double,decltype(LAMBDA)>()
			.WithoutErrors("Emission",static_left(LAMBDA))
			.WithoutErrors("Absorption",static_left(ABSOR));
	}
	return ABSOR(lambda);
}
BC420::BC420(vector<Pair>&&dimensions):
	RectangularScintillator(
		static_cast<vector<Pair>&&>(dimensions),
		TimeDistribution2(0.005,0.2,1.5),
		GetLambdaDistribution(),
		refraction,GetAbsorption
		
	){
}
BC420::~BC420(){}